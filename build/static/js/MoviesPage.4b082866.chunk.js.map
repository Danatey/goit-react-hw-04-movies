{"version":3,"sources":["services/API_KEY.js","services/API.js","views/MovieDetailsPage.jsx","components/MoviesPage/MoviesPage.jsx","views/MoviesView.jsx"],"names":["API_KEY","BASE_URL","getTrending","url","axios","get","getSearchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","Cast","lazy","Reviews","MovieDetailsPage","history","useHistory","location","useLocation","movieId","useParams","useRouteMatch","path","useState","movie","setMovies","useEffect","then","response","myMovie","img","data","poster_path","name","title","score","vote_average","overview","genres","type","className","onClick","push","state","from","src","alt","map","genre","join","to","pathname","fallback","exact","MoviesPage","onSearch","search","setSearch","reset","onSubmit","event","preventDefault","value","onChange","currentTarget","MoviesPageView","movies","fetchedMovies","results","movieName","prevState"],"mappings":"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","file":"static/js/MoviesPage.4b082866.chunk.js","sourcesContent":["const API_KEY = '1ca3db2e1e1b7285b1391876caf4be93';\r\nexport { API_KEY }","import axios from \"axios\";\r\nimport { API_KEY } from \"./API_KEY\";\r\n\r\nconst BASE_URL = \"https://api.themoviedb.org\";\r\n\r\nconst getTrending = () => {\r\n  const url = `${BASE_URL}/3/trending/all/day?api_key=${API_KEY}`;\r\n  return axios.get(url);\r\n};\r\n\r\nconst getSearchMovies = (query) => {\r\n  const url = `${BASE_URL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\r\n  return axios.get(url);\r\n};\r\n\r\nconst getMovieDetails = (id) => {\r\n  const url = `${BASE_URL}/3/movie/${id}?api_key=${API_KEY}&language=en-US`;\r\n  return axios.get(url);\r\n};\r\n\r\nconst getMovieCredits = (id) => {\r\n  const url = `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\r\n  return axios.get(url);\r\n};\r\n\r\nconst getMovieReviews = (id) => {\r\n  const url = `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\r\n  return axios.get(url);\r\n};\r\n\r\nexport {\r\n  getTrending,\r\n  getSearchMovies,\r\n  getMovieDetails,\r\n  getMovieCredits,\r\n  getMovieReviews,\r\n};\r\n","import { useState, useEffect, lazy, Suspense } from 'react';\r\nimport { NavLink, Switch, Route, useParams, useRouteMatch, useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport { getMovieDetails } from '../services/API';\r\n\r\nimport './MovieDetailsPage.scss'\r\n\r\nconst Cast = lazy(() => import('./Cast.jsx' /* webpackChunkName: \"Cast\" */));\r\nconst Reviews = lazy(() => import('./Reviews.jsx' /* webpackChunkName: \"Reviews\" */));\r\n\r\nconst MovieDetailsPage = () =>{\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { movieId } = useParams();\r\n    const { url, path } = useRouteMatch();\r\n    const [movie, setMovies] = useState();\r\n\r\n    useEffect(() => {\r\n            getMovieDetails(movieId).then(response => {\r\n                const myMovie = {\r\n                    img: response.data.poster_path,\r\n                    name: response.data.title ?? response.data.name,\r\n                    score: response.data.vote_average,\r\n                    overview: response.data.overview,\r\n                    genres: response.data.genres,\r\n                }\r\n                return setMovies(myMovie)\r\n            })\r\n    },[movieId]);\r\n\r\n    const onGoBack = () => {\r\n        history.push(location?.state?.from);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {movie && (\r\n                <>\r\n                    <button type=\"button\" className='go-back-button' onClick={onGoBack}>&#8678; Go Back</button>\r\n                    <div className='movie-container'>\r\n                        <div className='movie-image-container'>\r\n                            <img src={movie.img !==null ? ('https://image.tmdb.org/t/p/w400'+movie.img) : ('../image/logo512.png')} alt={movie.name} />\r\n                        </div>\r\n                        <div>\r\n                            <h2 className='movie-name'>{movie.name}</h2>\r\n                            <p>User Score: {movie.score}</p>\r\n                            <h3>Overview:</h3>\r\n                            <p>{movie.overview}</p>\r\n                            <h3>Genres:</h3>\r\n                            <p>{movie.genres.map(genre => genre.name).join(' ')}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='information-container'>\r\n                    <h3 className=\"information-title\">Additional information</h3>\r\n            \r\n                    <nav>\r\n                        <NavLink\r\n                            to={{pathname: `${url}/cast`,\r\n                                    state: { from: location?.state?.from },\r\n                                }}\r\n                            className='information-link'\r\n                        >\r\n                            Cast\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            to={{pathname: `${url}/reviews`,\r\n                                    state: { from: location?.state?.from },\r\n                                }}\r\n                            className='information-link'\r\n                        >\r\n                            Reviews\r\n                        </NavLink>\r\n                    </nav>\r\n                    </div>\r\n                    <Suspense fallback={<h3>Loading</h3>}>\r\n                        <Switch>\r\n                            <Route path={`${path}/cast`} exact>\r\n                                <Cast />\r\n                            </Route>\r\n\r\n                            <Route path={`${path}/reviews`} exact>\r\n                                <Reviews />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Suspense>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MovieDetailsPage;","import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MoviesPage.scss'\r\n\r\nconst MoviesPage = ({ onSearch }) => {\r\n  const [search, setSearch] = useState('');\r\n\r\n    const handleChange = event => {\r\n        setSearch(event.currentTarget.value)\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        // Проп который передается форме для вызова при сабмите\r\n        onSearch(search);\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setSearch('')\r\n    }\r\n\r\n    return <form onSubmit = {handleSubmit}>\r\n      <input type=\"text\" value={search} onChange={handleChange}/>\r\n      <button type=\"submit\">Search</button>\r\n  </form>;\r\n}\r\n\r\nMoviesPage.propTypes = {\r\n  onSearch: PropTypes.func,\r\n};\r\n\r\nexport default MoviesPage;","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport MoviesPage from \"../components/MoviesPage\";\r\nimport {getSearchMovies} from '../services/API'\r\n\r\nconst MoviesPageView = () => {\r\n    const location = useLocation();\r\n    const [movies, setMovies] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (search === \"\") {\r\n            return;\r\n        }\r\n        getSearchMovies(search)\r\n            .then((response) => {\r\n            const fetchedMovies = response.data.results.map((movie) => {\r\n                return {\r\n                    movieId: movie.id,\r\n                    movieName: movie.title ?? movie.name,\r\n                };\r\n            });\r\n\r\n            setMovies((prevState) => [...prevState, ...fetchedMovies]);\r\n        })\r\n    }, [search]);\r\n\r\n    const onSearchHandle = (query) => {\r\n        setSearch(query);\r\n        setMovies([]);\r\n    };\r\n\r\n    return (<>\r\n        <MoviesPage onSearch={onSearchHandle} />\r\n        {movies && (\r\n            movies.map(({movieId, movieName}) => (\r\n                <li key={movieId}>\r\n                    <Link\r\n                        to={{\r\n                            pathname: `/movies/${movieId}`,\r\n                            state: {from: location},\r\n                        }}>\r\n                        {movieName}\r\n                    </Link>\r\n            </li>\r\n            ))\r\n        )}\r\n    </>)\r\n}\r\n\r\nexport default MoviesPageView"],"sourceRoot":""}